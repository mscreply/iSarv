@page "{testId:int}"
@model iSarv.Areas.Test.Pages.Neo.Result

@{
    ViewData["Title"] = Localizer.Text("Neo Result");
    var lang = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName;
}

<h4>@ViewData["Title"]</h4>


@{ var colorStyles = new[] { "table-success", "table-info", "table-warning", "table-danger", "table-primary" }; }
<table class="table mt-4">
    <thead>
        <tr>
            <th>@Localizer.Text("Personality Inventory")</th>
            <th class="text-center">@Localizer.Text("Total Score")</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var pi in Model.Score)
        {
            int totalScore = pi.Value.Values.Sum();
            <tr>
                <td>@Localizer.TextIgnoreCase(pi.Key.ToString())</td>
                <td class="text-center">@totalScore</td>
            </tr>
            <tr>
                <td>
                    <table class="table table-sm table-striped @colorStyles[Model.Score.Keys.ToList().IndexOf(pi.Key)]">
                        <thead>
                            <tr>
                                <th>@Localizer.Text("Facet")</th>
                                <th>@Localizer.Text("Score")</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var facet in pi.Value)
                            {
                                <tr>
                                    <td>@Localizer.TextIgnoreCase(facet.Key.ToString())</td>
                                    <td>@Localizer.Text(facet.Value.ToString())</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <canvas id="bar-@pi.Key" width="200" height="100"></canvas>
                </td>
                <td class="w-50">
                    <canvas id="radar-@pi.Key" width="200" height="100"></canvas>
                </td>
            </tr>
        }
    </tbody>
</table>

<h5 class="mt-4">
    @Localizer.Text("Result")
    @if (!Model.NeoTest.IsConfirmed)
    {
        <span class="text-danger small">( @Localizer.TextIgnoreCase("This result was generated by AI and has not been reviewed and confirmed by Psychologist.") )</span>
    }
    @if (Model.NeoTest.Result == "Wait for AI")
    {
        <a href="javascript:window.location.reload(true)" class="btn btn-primary">@Localizer.Text("Get Result from AI")</a>
    }
</h5>
<p class="content-multiline">@Model.NeoTest.Result</p>

@if (!string.IsNullOrEmpty(Model.AIError))
{
    <div class="d-none">@Model.AIError</div>
}

@section Scripts {
    <script src="~/lib/chart/chart.js"></script>
    <script>
        $(document).ready(function () {
            @{
                var labels = new List<string>();
                foreach (var pi in Model.Score)
                {
                    labels.Add(string.Join(",", pi.Value.Keys.Select(k => Localizer.TextIgnoreCase(k.ToString()))));
                }
            }
            var scoreData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Score));
            var backgroundColors = [
                'rgba(75, 192, 192, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(255, 99, 132, 0.2)',
                'rgba(153, 102, 255, 0.2)'
            ];
            var borderColors = [
                'rgba(75, 192, 192, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(255, 99, 132, 1)',
                'rgba(153, 102, 255, 1)'
            ];
            for (var pi in scoreData) {
                var labels = "";
                switch (pi) {
                    case 'Neuroticism':
                        labels = decodeHtmlEntities("@labels[0]");
                        break;
                    case 'Extraversion':
                        labels = decodeHtmlEntities("@labels[1]");
                        break;
                    case 'Openness':
                        labels = decodeHtmlEntities("@labels[2]");
                        break;
                    case 'Agreeableness':
                        labels = decodeHtmlEntities("@labels[3]");
                        break;
                    case 'Conscientiousness':
                        labels = decodeHtmlEntities("@labels[4]");
                        break;
                }
                if (scoreData.hasOwnProperty(pi)) {
                    var facets = scoreData[pi];
                    var data = {
                        labels: labels.split(','),
                        datasets: [{
                            data: Object.values(facets),
                            backgroundColor: backgroundColors[Object.keys(scoreData).indexOf(pi)],
                            borderColor: borderColors[Object.keys(scoreData).indexOf(pi)],
                            borderWidth: 1
                        }]
                    };

                    var rOptions = {
                        scales: {
                            r: {
                                beginAtZero: true,
                                min: 0,
                                max: 24,
                                pointLabels: {
                                    font: {
                                        weight: 'bold'
                                    }
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    };

                    var bOptions = {
                        scales: {
                            y: {
                                beginAtZero: true,
                                min: 0,
                                max: 24
                            },
                            x: {
                                ticks: {
                                    font: {
                                        weight: 'bold'
                                    }
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    };

                    var radarCtx = document.getElementById('radar-' + pi.toString()).getContext('2d');
                    var radarChart = new Chart(radarCtx, {
                        type: 'radar',
                        data: data,
                        options: rOptions
                    });
                    var barCtx = document.getElementById('bar-' + pi.toString()).getContext('2d');
                    var barChart = new Chart(barCtx, {
                        type: 'bar',
                        data: data,
                        options: bOptions
                    });
 
                    if ('@lang' === 'fa') {
                        radarChart.options.scales.r.pointLabels.font.family = 'Vazir';
                        barChart.options.scales.x.ticks.font.family = 'Vazir';
                        radarChart.update();
                        barChart.update();
                    }
               }
            }
        });
    </script>
}
